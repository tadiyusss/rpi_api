from django.db import models

class RegisteredSensor(models.Model):
    """
    Database model for storing registered sensors.
    """
    name = models.CharField(max_length=255)
    battery_level = models.FloatField(default=100)
    sensor_type = models.CharField(max_length=32)
    last_seen = models.DateTimeField(auto_now_add=True)
    delay = models.IntegerField(default=1000)

    @property
    def battery_level_percentage(self):
        return f"{self.battery_level}%"
    
    @property
    def delay_in_seconds(self):
        return self.delay / 1000

    def __str__(self):
        return self.name

class Image(models.Model):
    """
    Database model for storing images captured by the Raspberry Pi.
    
    """
    
    unique_id = models.CharField(max_length=32, unique=True)
    image_name = models.CharField(max_length=255)
    detected_humans = models.IntegerField(default=0)
    processing_time = models.FloatField(default=0)
    timestamp = models.DateTimeField(auto_now_add=True)
    sensor_name = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.image_name
    
    @property
    def shortened_image_name(self):
        return f"{self.unique_id[:6]}...{self.image_name[-9:]}"
    
    @property
    def rounded_processing_time(self):
        return round(self.processing_time, 2)
    
class Temperature(models.Model):
    """
    Database model for storing temperature readings from ESP8266.
    """
    temperature = models.FloatField()
    humidity = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)
    sensor_name = models.CharField(max_length=255, blank=True)    

    def __str__(self):
        return f"{self.temperature}Â°C"
    
    @property
    def fahrenheit(self):
        return round(self.temperature * 9/5 + 32, 2)

class Logs(models.Model):
    """
    Database model for storing logs generated by the Raspberry Pi.
    Severity can be INFO, SUCCESS, WARNING, or ERROR.
    """
    severity = models.CharField(max_length=32)
    message = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.message
    
class Power(models.Model):
    """
    Database model for storing power usage data.
    """

    voltage = models.FloatField(default=0)
    current = models.FloatField(default=0)
    power = models.FloatField(default=0)
    energy = models.FloatField(default=0)
    frequency = models.FloatField(default=0)
    power_factor = models.FloatField(default=0)
    timestamp = models.DateTimeField(auto_now_add=True)
    sensor_name = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return f"{self.power}W"
    

class IRSend(models.Model):
    """
    Database for storing signals to be run by the IR transmitter.
    """

    name = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)
    received = models.BooleanField(default=False)

    def __str__(self):
        return self.name